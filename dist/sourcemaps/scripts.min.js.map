{"version":3,"sources":["creator.js","main.js"],"names":["NewSet","constructor","motherBlock","this","setBlockElement","setButtonElement","inputElements","createSetBlock","document","createElement","className","setPointElement","appendChild","let","i","labelElement","inputElement","textElement","setAttribute","weigntValidation","repValidation","push","innerText","addBtnLogic","input","addEventListener","val","event","target","value","replace","match","element","that","add","submit","forEach","removeAttribute","removeEventListener","edit","console","log","call","NewExercise","xrcsName","xrcsBlockElement","init","getElementById","createBlock","motherBlockElement","xrcsInfoElement","createInfoElemet","createSetsElement","xrcsSetsElement","xrcsSetElement","xrcsInfoNameElement","showBlock","$","click"],"mappings":"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","file":"../scripts/scripts.min.js","sourcesContent":["\n\n// $('.add_exercise').click(() => {\n//     $('.container#exercises').append($('template#1').html());\n    \n// })\n\n// class RowSet {\n//     constructor(element) {\n//         this.element = element;\n//         this.button = element.find('.add');\n//         this.button.click(() => {\n//             const weight = this.element.find('.weight input').val();\n//             const reps = this.element.find('.repeats input').val();\n//             if(true) {\n//                 const doneSet = $('template#2').html();\n//                 this.element.parent().prepend(doneSet);\n//                 console.log(this.element.parent())\n//             }\n//         })\n//     }\n//     show() {\n//         this.button.click(() => {\n//             console.log(this.element.find('.weight input').val())\n//             console.log(this.element.find('.repeats input').val())\n//         })\n//     }\n  \n\n// }\n\n\n// let observer = new MutationObserver(mutation => {\n//     const element = mutation[0].addedNodes[1];\n//     let rowset = new RowSet($(element).find('.new_set'));\n\n// });\n// observer.observe($('.container#exercises')[0], {childList: true});\n\n\n","(function () {\n    class NewSet {\n        constructor (motherBlock) {\n            this.setBlockElement = null;\n            this.setButtonElement = null;\n            this.inputElements = [];\n            this.motherBlock = motherBlock;\n            this.createSetBlock();\n            return this.setBlockElement;\n        }\n        createSetBlock () {\n            const that = this;\n            this.setBlockElement = document.createElement('div');\n            this.setBlockElement.className = 'new_set';\n\n            const setPointElement = document.createElement('div');\n            setPointElement.className = 'set-point'\n            this.setBlockElement.appendChild(setPointElement);\n\n            for (let i = 0; i < 2; i++) {\n                const labelElement = document.createElement('label');\n                labelElement.className = (i === 0? \"weight\" : \"repeats\");\n\n                const inputElement = document.createElement('input');\n                inputElement.setAttribute('type', 'number');\n                i === 0 ? this.weigntValidation(inputElement) : this.repValidation(inputElement);\n                this.inputElements.push(inputElement);\n\n                const textElement = document.createElement('span');\n                textElement.innerText = (i === 0? \"kg\" : \"rep\")\n\n                labelElement.appendChild(inputElement);\n                labelElement.appendChild(textElement);\n                this.setBlockElement.appendChild(labelElement);\n            }\n\n            const setButtonElement = document.createElement('div');\n            setButtonElement.className = 'btn add';\n            setButtonElement.innerText = '+';\n            this.addBtnLogic(setButtonElement);\n            \n\n            this.setButtonElement = setButtonElement;\n            this.setBlockElement.appendChild(this.setButtonElement);\n        }  \n        weigntValidation (input) {\n            input.addEventListener('input', (event) => {\n                const val = event.target.value.replace(/\\D/g, '').match(/(\\d{0,2})(\\d{0,2})/);\n                event.target.value = !val[2] ? val[1] : val[1] + '.' + val[2];\n            })\n        }\n        repValidation (input) {\n            input.addEventListener('input', (event) => {\n                const val = event.target.value.replace(/\\D/g, '').match(/(\\d{0,2})/);\n                event.target.value = val[1];\n\n            })\n        }\n        addBtnLogic (element) {\n            const that = this;\n            element.addEventListener('click', function add () {\n                if(!that.inputElements[0].value || !that.inputElements[1].value) {\n                    console.log('empty val')\n                    return\n                }\n                this.removeEventListener('click', add);\n                this.addEventListener('click', edit);\n\n                function submit () {\n                    that.setButtonElement.innerText = 'sbmt';\n                    that.inputElements.forEach( input => {\n                        input.removeAttribute('disabled');\n                    });\n                    this.removeEventListener('click', submit);\n                    this.addEventListener('click', edit)\n                }\n\n                function edit () {\n                    if(!that.inputElements[0].value || !that.inputElements[1].value) {\n                        console.log('empty val')\n                        return\n                    }\n                    that.setButtonElement.innerText = 'edit';\n                    that.inputElements.forEach( input => {\n                        input.setAttribute('disabled', 'disabled');\n                    })\n                    this.removeEventListener('click', edit);\n                    this.addEventListener('click', submit);\n                }\n                \n                that.motherBlock.appendChild(new NewSet(that.motherBlock));\n                edit.call(this);\n            });\n        } \n\n    }\n\n\n\n    const NewExercise = {\n        xrcsName : null,\n        xrcsBlockElement : null,\n        init() {\n            this.xrcsName = document.getElementById('xrcsName').value;\n            this.createBlock();\n            \n            \n            \n        },\n\n\n        createBlock () {\n            const motherBlockElement = document.getElementById('exercises');\n\n            this.xrcsBlockElement = document.createElement('div');\n            this.xrcsBlockElement.className = 'block exercise'\n            \n            const xrcsInfoElement = this.createInfoElemet();\n            this.xrcsBlockElement.appendChild(xrcsInfoElement);\n            \n            motherBlockElement.appendChild(this.xrcsBlockElement)\n\n            this.createSetsElement();\n        },\n\n\n        createSetsElement () {\n            const xrcsSetsElement = document.createElement('div');\n            xrcsSetsElement.className = 'exercise__sets'\n\n            const xrcsSetElement = new NewSet(xrcsSetsElement);\n            xrcsSetsElement.appendChild(xrcsSetElement)\n\n            this.xrcsBlockElement.appendChild(xrcsSetsElement)\n        },\n\n\n        createInfoElemet () {\n            const xrcsInfoElement = document.createElement('div');\n            xrcsInfoElement.className = 'exercies__info';\n\n            const xrcsInfoNameElement = document.createElement('div');\n            xrcsInfoNameElement.className = 'name';\n            xrcsInfoNameElement.innerText = this.xrcsName + ':';\n\n            //create \"last_training\"\n\n            xrcsInfoElement.appendChild(xrcsInfoNameElement);\n            return xrcsInfoElement;\n\n        },\n        showBlock () {\n        }\n    }\n\n    $('#add-exercise').click(() => {\n        if($('#xrcsName').val()) {\n\n            NewExercise.init()\n        }\n    })\n})();"]}